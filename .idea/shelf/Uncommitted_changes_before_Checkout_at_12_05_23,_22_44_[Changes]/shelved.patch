Index: src/main/java/ru/clevertec/ecl/controller/tagController/TagController.java
===================================================================
diff --git a/src/main/java/ru/clevertec/ecl/controller/tagController/TagController.java b/src/main/java/ru/clevertec/ecl/controller/tagController/TagController.java
deleted file mode 100644
--- a/src/main/java/ru/clevertec/ecl/controller/tagController/TagController.java	(revision d2de2935d595724a27b82725daf6673e60a6ecb7)
+++ /dev/null	(revision d2de2935d595724a27b82725daf6673e60a6ecb7)
@@ -1,55 +0,0 @@
-package ru.clevertec.ecl.controller.tagController;
-
-import org.springframework.data.domain.Pageable;
-import org.springframework.data.web.PageableDefault;
-import org.springframework.http.HttpStatus;
-import org.springframework.web.bind.annotation.*;
-import org.springframework.http.MediaType;
-import ru.clevertec.ecl.dto.tag.TagDto;
-import ru.clevertec.ecl.dto.tag.TagDtoResponse;
-import ru.clevertec.ecl.service.tag.TagService;
-
-import java.util.List;
-
-
-@RestController
-@RequestMapping("/tag")
-public class TagController {
-
-    private final TagService tagService;
-
-    public TagController(TagService tagService) {
-        this.tagService = tagService;
-    }
-
-    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE,
-    produces = MediaType.APPLICATION_JSON_VALUE)
-    @ResponseStatus(HttpStatus.CREATED)
-    public Long create(@RequestBody TagDto tagDto){
-        return tagService.create(tagDto);
-    }
-
-    @GetMapping(value= "{id}", produces = MediaType.APPLICATION_JSON_VALUE)
-    @ResponseStatus(HttpStatus.OK)
-    public TagDtoResponse read(@PathVariable Long id) throws Exception {
-        return tagService.read(id);
-    }
-
-    @PatchMapping(consumes = MediaType.APPLICATION_JSON_VALUE,
-    produces = MediaType.APPLICATION_JSON_VALUE, path = "{id}")
-    @ResponseStatus(HttpStatus.OK)
-    public boolean update(@PathVariable Long id, @RequestBody TagDto tagDto){
-        return tagService.update(tagDto, id);
-    }
-
-    @DeleteMapping("{id}")
-    @ResponseStatus(HttpStatus.OK)
-    public boolean delete(@PathVariable Long id){
-        return tagService.delete(id);
-    }
-
-    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
-    public List<TagDtoResponse> readAll(@PageableDefault(page = 0)Pageable pageable){
-        return tagService.readAll(pageable);
-    }
-}
Index: .gradle/buildOutputCleanup/cache.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Fri May 12 20:42:04 EEST 2023\ngradle.version=8.1.1\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/.gradle/buildOutputCleanup/cache.properties b/.gradle/buildOutputCleanup/cache.properties
--- a/.gradle/buildOutputCleanup/cache.properties	(revision d2de2935d595724a27b82725daf6673e60a6ecb7)
+++ b/.gradle/buildOutputCleanup/cache.properties	(date 1683918557221)
@@ -1,2 +1,2 @@
-#Fri May 12 20:42:04 EEST 2023
-gradle.version=8.1.1
+#Fri May 12 22:09:17 EEST 2023
+gradle.version=7.2
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># SpringTask\nWEB-приложение реализовано на платформе JDK 17.\nИспользуемая СУБД - PostgreSQL 14.\nКонтейнер сервлетов — Apache Tomcat 10.\nДля доступа к БД использована Hibernate.\n\nРеализована базовая CRUD-функциональность для сущности giftCertificates.\nПрисутствует реализация REST API.\n\nРеализована автоматическая сборка и развертывание приложения при помощи gradle.\n\nДля REST API:\n\nиспользована библиотека Fjackson-databind, преобразующая Java-объекты в стандартный JSON-формат.\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision d2de2935d595724a27b82725daf6673e60a6ecb7)
+++ b/README.md	(date 1683920466961)
@@ -1,14 +1,14 @@
-# SpringTask
-WEB-приложение реализовано на платформе JDK 17.
-Используемая СУБД - PostgreSQL 14.
-Контейнер сервлетов — Apache Tomcat 10.
-Для доступа к БД использована Hibernate.
+
+Привет, я Артем
 
-Реализована базовая CRUD-функциональность для сущности giftCertificates.
-Присутствует реализация REST API.
+Этот проект представляет собой Java-приложение, для покупки сертификатов пользователем. Приложение построено с использованием 17 Java и использует Spring-boot, Hibernate, Grade, Posgresql, Unit 5, Mockito, для достижения своей функциональности.
 
-Реализована автоматическая сборка и развертывание приложения при помощи gradle.
+Начиная Чтобы начать работу с этим проектом, на вашем компьютере должна быть установлена ​​17 Java. Вы можете загрузить и установить последнюю версию Java с сайта https://www.oracle.com/java/.
 
-Для REST API:
+Далее вам нужно будет скачать исходный код проекта с GitHub Получив исходный код, вы можете импортировать проект в среду IDE IntelliJ и запустить его оттуда.
 
-использована библиотека Fjackson-databind, преобразующая Java-объекты в стандартный JSON-формат.
+Чтобы использовать приложение, нужно использовать например Postman, ![получить все сертификаты по методу GET](http://localhost:8080/certificates)  /удалить ![сертификат по методу Delete](http://localhost:8080/certificates/1) / ![получить один сертификат  по методу Get](http://localhost:8080/certificates/1)/ ![создать сертификат  по методу POST](http://localhost:8080/certificates) 
+
+Функции Приложение имеет следующие возможности: CRUD операции для Tag/Certificates/User, так же  покупка сертификата пользователем, получение покупок у пользователя и найти самый популярный сертификат
+
+Заключение Благодарим вас за интерес к этому Java-проекту. Если у вас есть какие-либо вопросы или отзывы, пожалуйста, не стесняйтесь linkedin.
\ No newline at end of file
